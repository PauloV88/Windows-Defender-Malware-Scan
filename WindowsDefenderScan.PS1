#############################################################################################################################################################################################################################################
# Windows Defender Malware Scan
# Author: Paulo Vilchez
#############################################################################################################################################################################################################################################

<#
.SYNOPSIS
Runs a Windows Defender Malware Scan as a background job and notifies the IT administrator by email of any threats.

.DESCRIPTION
This script runs a malware scan using Windows Defender and sends the results to the specified email address in a formatted HTML table. It runs the scan as a background job to avoid blocking other tasks.
#>

# Advise the administrator of what this script will do #
$confirmation = Write-Host "This script will run a Windows Defender Malware Scan as a background job and notify the IT administrator by email of any threats. Are you sure you wish to continue? (y/n)" -BackgroundColor Green
    if($confirmation -eq "y") {
	# Proceed with script
}
    else {
       Write-Output "This programme will now be aborted. Goodbye!"
}

# Administrator must input password to run script #
$validPassword = "xxxxxxxxx"
$attemptsRemaining = 3

do {
    $password = Read-Host "Enter password:"

    if ($password -eq $validPassword) {
        $authorized = $true
    }
    else {
        $attemptsRemaining--
        Write-Output "Incorrect password. $attemptsRemaining attempts remaining."
        $authorized = $false
    }
} until ($authorized -or $attemptsRemaining -eq 0)

if ($authorized) {
    # Proceed with the script
}
else {
    Write-Output "Authorization failed. This process will now be aborted. Goodbye!"
    exit
}

# Set parameters for the Windows Defender Malware Scan #
try {
    $MalwareScan = Get-MpThreatDetection -AsJob -CimSession #My IP Address -StartTime "2023-05-16 00:00:00" `
           -EndTime "2023-05-16 23:59:59" -Severity All -Status Blocked -Category PUA
}
catch {
    Write-Host "An error occurred while running the malware scan: $($_.Exception.Message)"
}

# Wait for the job to finish before retrieving the results #
Get-Job $MalwareScan | Wait-Job

# Retrieve malware scan results and convert it to HTML table #
$MalwareResults = Receive-Job $MalwareScan
$htmlTable = $MalwareResults | ConvertTo-Html -As Table

# Define the styles for the table and its contents #
$cssStyles = @"
<style>
	table {
		border-collapse: collapse;
		width: 100%;
		margin-bottom: 20px;
	      }
	th, td {
		border: 1px solid #ddd;
		padding: 8px;
		text-align: 20px;
	      }
	th   {
		background-color: #4caf50;
		color: white;
	      }
	tr:nth-child(even) {
		background-color: #f2f2f2;
	      }
</style>
"@

# Format report to endpoint email with a HTML & CSS format #
$mailbody = ""
$mailbody += '<html><head><meta http-equi=Content-Type content="text/html; charset=utf-8">' + $cssStyles + '</head><body>'
$mailbody += '<p>'
$mailbody += 'Windows Defender Malware Scan for 14/05/2023 ' + "<br />"
$mailbody += '<p>'
$mailbody += '<th>Malware Threats by Name</th>'

# Combine the CSS styles and HTML table into a single string #
$htmlOutput = $htmlTable

# Save the formatted results to a HTML file #
$htmlOutput | Out-File "MalwareScanResults.html"

# Set Mail parameters #
$subject = "Windows Defender Malware Scan"
$smtpServer = "smtp.office365.com"
$smtpPort = 587
$smtpUser = "xxxxxxxxx"
$smtpPassword = "xxxxxxxxx"
$from = "xxxxxxxxx"
$to = "xxxxxxxxx"

# Send mail to specific email address with report of malware scan results #
$smtpCredential = New-Object System.Management.Automation.PSCredential ($smtpUser, (ConvertTo-SecureString -String $smtpPassword -AsPlainText -Force))
Send-MailMessage -Subject $subject -Server $smtpServer -Port $smtpPort -Credential $smtpCredential -From $from -To $to -Body ($htmlOutput + $mailbody) -BodyAsHtml -DeliveryNotificationOption OnSuccess -Body $mailbody

#############################################################################################################################################################################################################################################
# Windows Defender Malware Scan
# Author: Paulo Vilchez
#############################################################################################################################################################################################################################################